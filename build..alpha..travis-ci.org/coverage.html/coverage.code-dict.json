{"/home/travis/build/npmtest/node-npmtest-node-progress-bars/test.js":"/* istanbul instrument in package npmtest_node_progress_bars */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-progress-bars/lib.npmtest_node_progress_bars.js":"/* istanbul instrument in package npmtest_node_progress_bars */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_progress_bars = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_progress_bars = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-progress-bars/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-progress-bars && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_progress_bars */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_progress_bars\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_progress_bars.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_progress_bars.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_progress_bars.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_progress_bars.__dirname + '/lib.npmtest_node_progress_bars.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-progress-bars/node_modules/node-progress-bars/index.js":"var ansi         = require('ansi.js');\nvar endWith      = require('end-with');\nvar startWith    = require('start-with');\nvar getCurosrPos = require('get-cursor-position');\nvar newlineEvent = require('on-new-line');\n\nvar stream      = process.stdout;\nstream.rows     = stream.rows || 40;\nstream.columns  = stream.columns || 80;\n\nvar placeholder = '\\uFFFC';\nvar rendering   = false;\nvar instances   = [];\n\nfunction beginUpdate() {\n  rendering = true;\n}\n\nfunction endUpdate() {\n  rendering = false;\n}\n\nfunction isUpdating() {\n  return rendering === true;\n}\n\nnewlineEvent(stream);\n\nstream.on('before:newlines', function (count) {\n\n  if (isUpdating() || instances.length === 0) {\n    return;\n  }\n\n  var current = getCurosrPos.sync();\n  // did not reach the end, the screen need not scroll up\n  if (current.row < stream.rows) {\n    return;\n  }\n\n  var minRow = 1;\n  var cursor = instances[0].cursor;\n\n  beginUpdate();\n\n  instances.forEach(function (instance) {\n\n    if (instance.rendered && (!instance.completed || instance.tough)) {\n      // clear the rendered bar\n      instance.clear();\n      instance.origin.row = Math.max(minRow, instance.origin.row - count);\n      minRow += instance.rows;\n    } else if (instance.rendered\n      && instance.completed\n      && !instance.tough\n      && !instance.archived\n      && !instance.clean) {\n\n      instance.clear();\n      instance.origin.row = -instance.rows;\n      instance.colorize(instance.output);\n      instance.archived = true;\n    }\n  });\n\n\n  // append empty row for the new lines, the screen will scroll up,\n  // then we can move the bars to their's new position.\n  cursor\n    .moveTo(current.row, current.col)\n    .write(repeatChar(count, '\\n'));\n\n  instances.forEach(function (instance) {\n    if (instance.rendered && (!instance.completed || instance.tough)) {\n      instance.colorize(instance.output);\n    }\n  });\n\n  cursor.moveTo(current.row - count, current.col);\n\n  endUpdate();\n});\n\n\nfunction ProgressBar(options) {\n\n  options = options || {};\n\n  this.cursor  = ansi(stream);\n  this.total   = options.total || 100;\n  this.current = options.current || 0;\n  this.width   = options.width || 60;\n\n  if (typeof this.width === 'string') {\n    if (endWith(this.width, '%')) {\n      this.width = parseFloat(this.width) / 100 % 1;\n    } else {\n      this.width = parseFloat(this.width);\n    }\n  }\n\n  this.tough = !!options.tough;\n  this.clean = !!options.clean;\n  this.chars = {\n    blank: options.blank || '—',\n    filled: options.filled || '▇'\n  };\n\n  // callback on completed\n  this.callback = options.callback;\n\n  this.setSchema(options.schema);\n  this.snoop();\n\n  instances.push(this);\n}\n\n\n// exports\n// -------\n\nmodule.exports = ProgressBar;\n\n\n// proto\n// -----\n\nProgressBar.prototype.setSchema = function (schema, refresh) {\n  this.schema = schema || ' [:bar] :current/:total :percent :elapseds :etas';\n\n  if (refresh) {\n    this.compile(refresh);\n  }\n};\n\nProgressBar.prototype.tick = function (delta, tokens) {\n\n  var type = typeof delta;\n\n  if (type === 'object') {\n    tokens = delta;\n    delta  = 1;\n  } else if (type === 'undefined') {\n    delta = 1;\n  } else {\n    delta = parseFloat(delta);\n    if (isNaN(delta) || !isFinite(delta)) {\n      delta = 1;\n    }\n  }\n\n  if (this.completed && delta >= 0) {\n    return;\n  }\n\n  if (!this.start) {\n    this.start = new Date;\n  }\n\n  this.current += delta;\n  this.compile(tokens);\n  this.snoop();\n};\n\nProgressBar.prototype.update = function (ratio, tokens) {\n\n  var completed = Math.floor(ratio * this.total);\n  var delta     = completed - this.current;\n\n  this.tick(delta, tokens);\n};\n\nProgressBar.prototype.compile = function (tokens) {\n\n  var ratio = this.current / this.total;\n\n  ratio = Math.min(Math.max(ratio, 0), 1);\n\n  var chars   = this.chars;\n  var schema  = this.schema;\n  var percent = ratio * 100;\n  var elapsed = new Date - this.start;\n\n  var eta;\n  if (this.current <= 0) {\n    eta = '-';\n  } else {\n    eta = percent === 100 ? 0 : elapsed * this.total / this.current;\n    eta = formatTime(eta);\n  }\n\n  var output = schema\n    .replace(/:total/g, this.total)\n    .replace(/:current/g, this.current)\n    .replace(/:elapsed/g, formatTime(elapsed))\n    .replace(/:eta/g, eta)\n    .replace(/:percent/g, toFixed(percent, 0) + '%');\n\n  if (tokens && typeof tokens === 'object') {\n    for (var key in tokens) {\n      if (tokens.hasOwnProperty(key)) {\n        output = output.replace(new RegExp(':' + key, 'g'), ('' + tokens[key]) || placeholder);\n      }\n    }\n  }\n\n  var raw   = bleach(output);\n  var cols  = process.stdout.columns;\n  var width = this.width;\n\n  width = width < 1 ? cols * width : width;\n  width = Math.min(width, Math.max(0, cols - bareLength(raw)));\n\n  var length = Math.round(width * ratio);\n  var filled = repeatChar(length, chars.filled);\n  var blank  = repeatChar(width - length, chars.blank);\n\n  raw    = combine(raw, filled, blank, true);\n  output = combine(output, filled, blank, false);\n\n  // without color and font styles\n  this.raw = raw;\n  // row count of the progress bar\n  this.rows = raw.split('\\n').length;\n\n  this.render(output);\n};\n\nProgressBar.prototype.render = function (output) {\n\n  if (this.output === output) {\n    return;\n  }\n\n  var current = getCurosrPos.sync();\n  if (!current) {\n    return;\n  }\n\n  beginUpdate();\n\n  this.savePos = current;\n  if (!this.origin) {\n    this.origin = current;\n  }\n\n  if (this.origin.row === stream.rows) {\n\n    this.cursor.write(repeatChar(this.rows, '\\n'));\n\n    instances.forEach(function (instance) {\n      if (instance.origin) {\n        instance.origin.row -= this.rows;\n      }\n    }, this);\n  }\n\n  this.clear();\n  this.colorize(output);\n\n  // move the cursor to the current position.\n  if (this.rendered) {\n    this.cursor.moveTo(current.row, current.col);\n  }\n\n  this.output   = output;\n  this.rendered = true;\n\n  endUpdate();\n};\n\nProgressBar.prototype.colorize = function (output) {\n\n  var cursor  = this.cursor;\n  var parts   = output.split(/(\\.[A-Za-z]+)/g);\n  var content = '';\n  var matches = [];\n\n  cursor.moveTo(this.origin.row, this.origin.col);\n\n  function write() {\n\n    //console.log(content)\n    //console.log(matches)\n\n    var hasFg    = false;\n    var hasBg    = false;\n    var gradient = null;\n\n    matches.forEach(function (match) {\n\n      if (match.method === 'gradient') {\n        gradient = match;\n        return;\n      }\n\n      var host = match.isBg\n        ? cursor.bg : match.isFont\n        ? cursor.font\n        : cursor.fg;\n\n      if (match.isBg) {\n        hasBg = true;\n      } else {\n        hasFg = true;\n      }\n\n      host[match.method]();\n    });\n\n    content = content.replace(new RegExp(placeholder, 'g'), '');\n\n    if (content) {\n\n      if (gradient) {\n\n        var color1 = gradient.color1;\n        var color2 = gradient.color2;\n\n        for (var i = 0, l = content.length; i < l; i++) {\n\n          var color = i === 0\n            ? color1 : i === l - 1\n            ? color2\n            : interpolate(color1, color2, (i + 1) / l);\n\n          cursor.fg.rgb(color.r, color.g, color.b);\n          cursor.write(content[i]);\n          cursor.fg.reset();\n        }\n      } else {\n        cursor.write(content);\n      }\n    }\n\n    // reset font style\n    matches.forEach(function (match) {\n      if (match.isFont) {\n        cursor.font['reset' + ucFirst(match.method)]();\n      }\n    });\n\n    // reset foreground\n    if (hasFg) {\n      cursor.fg.reset();\n    }\n\n    // reset background\n    if (hasBg) {\n      cursor.bg.reset();\n    }\n\n    matches = [];\n    content = '';\n  }\n\n  for (var i = 0, l = parts.length; i < l; i++) {\n\n    var part  = parts[i];\n    var match = null;\n\n    if (!part) {\n      continue;\n    }\n\n    if (startWith(part, '.')) {\n\n      if (part === '.gradient') {\n        if (parts[i + 1]) {\n          match = parseGradient(parts[i + 1]);\n\n          parts[i + 1] = parts[i + 1].replace(/^\\((.+),(.+)\\)/, '');\n        }\n      } else {\n        match = parseMethod(cursor, part);\n      }\n    }\n\n    if (match) {\n      if (match.suffix) {\n        if (i < l - 1) {\n          parts[i + 1] += match.suffix;\n        } else {\n          // the last one\n          cursor.write(match.suffix);\n        }\n      }\n\n      matches.push(match);\n    } else {\n\n      if (matches.length) {\n        write();\n      }\n\n      content += part;\n    }\n  }\n\n  write();\n\n  cursor.write('\\n');\n};\n\nProgressBar.prototype.clear = function () {\n\n  if (this.output) {\n    this.cursor.moveTo(this.origin.row, this.origin.col);\n    for (var i = 0; i < this.rows; i++) {\n      this.cursor\n        .eraseLine()\n        .moveDown();\n    }\n    this.cursor.moveTo(this.origin.row, this.origin.col);\n  }\n};\n\nProgressBar.prototype.snoop = function () {\n\n  this.completed = this.current >= this.total;\n\n  if (this.completed) {\n    this.terminate();\n  }\n\n  return this.completed;\n};\n\nProgressBar.prototype.terminate = function () {\n\n  if (this.clean && this.rendered) {\n    this.clear();\n    //var lines = this.raw.split('\\n');\n    //for (var i = 0; i < this.rows; i++) {\n    //  this.cursor\n    //    .deleteLine()\n    //    .moveDown();\n    //}\n  }\n\n  this.callback && this.callback(this);\n  this.cursor.moveTo(this.savePos.row, this.savePos.col);\n};\n\n\n// helpers\n// -------\n\nfunction toFixed(value, precision) {\n\n  var power = Math.pow(10, precision);\n\n  return (Math.round(value * power) / power).toFixed(precision);\n}\n\nfunction formatTime(ms) {\n  return isNaN(ms) || !isFinite(ms)\n    ? '0.0'\n    : toFixed(ms / 1000, 1);\n}\n\nfunction lcFirst(str) {\n  return str.charAt(0).toLowerCase() + str.substring(1);\n}\n\nfunction ucFirst(str) {\n  return str.charAt(0).toUpperCase() + str.substring(1);\n}\n\nfunction repeatChar(count, char) {\n  return new Array(count + 1).join(char);\n}\n\nfunction parseMethod(cursor, str) {\n\n  str = str.substr(1);\n\n  return parseColor(cursor, str)\n    || parseFont(cursor, str)\n    || parseGradient(str);\n}\n\nfunction parseColor(cursor, str) {\n\n  var match = str.match(/^(bgR|r)ed/)\n    || str.match(/^(bgB|b)lue/)\n    || str.match(/^(bgC|c)yan/)\n    || str.match(/^(bgG|g)rey/)\n    || str.match(/^(bgW|w)hite/)\n    || str.match(/^(bgB|b)lack/)\n    || str.match(/^(bgG|g)reen/)\n    || str.match(/^(bgY|y)ellow/)\n    || str.match(/^(bgM|m)agenta/)\n    || str.match(/^(bgB|b)right(Black|Red|Green|Yellow|Blue|Magenta|Cyan|White)/);\n\n  if (match) {\n\n    var method = match[0];\n    var suffix = str.substr(method.length);\n    var isBg   = startWith(method, 'bg');\n\n    if (isBg) {\n      method = lcFirst(method.substr(2));\n    }\n\n    if (typeof cursor[method] === 'function') {\n      return {\n        isBg: isBg,\n        method: method,\n        suffix: suffix\n      };\n    }\n  }\n}\n\nfunction parseFont(cursor, str) {\n\n  var match = str.match(/^bold|italic|underline|inverse/);\n  if (match) {\n\n    var method = match[0];\n    var suffix = str.substr(method.length);\n\n    if (typeof cursor[method] === 'function') {\n      return {\n        isFont: true,\n        method: method,\n        suffix: suffix\n      };\n    }\n  }\n}\n\nfunction parseGradient(str) {\n\n  var match = str.match(/^\\((.+),(.+)\\)/);\n  if (match) {\n\n    var color1 = match[1].trim();\n    var color2 = match[2].trim();\n\n    color1 = startWith(color1, '#') ? hex2rgb(color1) : name2rgb(color1);\n    color2 = startWith(color2, '#') ? hex2rgb(color2) : name2rgb(color2);\n\n    if (color1 && color2) {\n      return {\n        method: 'gradient',\n        color1: color1,\n        color2: color2\n      };\n    }\n  }\n}\n\nfunction interpolate(color1, color2, percent) {\n\n  return {\n    r: atPercent(color1.r, color2.r, percent),\n    g: atPercent(color1.g, color2.g, percent),\n    b: atPercent(color1.b, color2.b, percent)\n  };\n}\n\nfunction atPercent(a, b, percent) {\n  return a + Math.round((b - a) * percent);\n}\n\nfunction hex2rgb(color) {\n\n  var c = color.substring(1);\n  var r = c.substring(0, 2);\n  var g = c.substring(2, 4);\n  var b = c.substring(4, 6);\n\n  return {\n    r: parseInt(r, 16),\n    g: parseInt(g, 16),\n    b: parseInt(b, 16)\n  };\n}\n\nfunction name2rgb(name) {\n  var hex = {\n    red: '#ff0000',\n    blue: '#0000ff',\n    cyan: '#00ffff',\n    grey: '#808080',\n    white: '#ffffff',\n    black: '#000000',\n    green: '#008000',\n    yellow: '#ffff00',\n    magenta: '#ff00ff'\n  }[name];\n\n  return hex ? hex2rgb(hex) : null;\n}\n\nfunction bleach(output) {\n  return output\n    .replace(/\\.(bgR|r)ed/g, '')\n    .replace(/\\.(bgB|b)lue/g, '')\n    .replace(/\\.(bgC|c)yan/g, '')\n    .replace(/\\.(bgG|g)rey/g, '')\n    .replace(/\\.(bgW|w)hite/g, '')\n    .replace(/\\.(bgB|b)lack/g, '')\n    .replace(/\\.(bgG|g)reen/g, '')\n    .replace(/\\.(bgY|y)ellow/g, '')\n    .replace(/\\.(bgM|m)agenta/g, '')\n    // bright\n    .replace(/\\.(bgB|b)right(Black|Red|Green|Yellow|Blue|Magenta|Cyan|White)/g, '')\n    // font style\n    .replace(/\\.bold|italic|underline|inverse/g, '')\n    // gradient\n    .replace(/\\.gradient\\((.+),(.+)\\)/g, '');\n}\n\nfunction combine(output, filled, blank, bare) {\n\n  var bar = filled + blank;\n\n  if (!bare) {\n    bar    = bar || placeholder;\n    blank  = blank || placeholder;\n    filled = filled || placeholder;\n  }\n\n  return output\n    .replace(/:filled/g, filled)\n    .replace(/:blank/g, blank)\n    .replace(/:bar/g, bar);\n}\n\nfunction bareLength(output) {\n  var str = output\n    .replace(/:filled/g, '')\n    .replace(/:blank/g, '')\n    .replace(/:bar/g, '');\n\n  return str.length;\n}\n"}